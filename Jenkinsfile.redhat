def MAVEN_PARAMS = '-B -e -ntp -s $MAVEN_SETTINGS -Djava.net.preferIPv4Stack=true'

pipeline {

    agent {
        label 'checkin'
    }

    tools {
        jdk 'java-11'
    }

    environment {
        MAVEN_OPTS = '-Xmx3g'
        TESTCONTAINERS_RYUK_DISABLED = 'true'
    }

    options {
        buildDiscarder(
            logRotator(artifactNumToKeepStr: '5', numToKeepStr: '10')
        )
    }

    stages {
        stage('Clean') {
            steps {
                // Clean up any orphaned containers that may be lingering
                sh "docker container prune -f"
            }
        }

        stage('Build') {
            steps {
                configFileProvider([configFile(fileId: 'fuse-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                    sh "./mvnw ${MAVEN_PARAMS} clean install -Dquickly -T1C"
                }
            }
        }

        stage('Core Tests') {
            steps {
                configFileProvider([configFile(fileId: 'fuse-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                    sh "cd extensions-core && ../mvnw ${MAVEN_PARAMS} clean test -fae"
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                    junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/*.xml'
                }
            }
        }

        stage('Integration Tests') {
            steps {
                configFileProvider([configFile(fileId: 'fuse-maven-settings', variable: 'MAVEN_SETTINGS')]) {
                    script {
                        sh "cd integration-tests && ../mvnw $MAVEN_PARAMS verify -fae"
                    }
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: '**/target/surefire-reports/*.xml'
                    junit allowEmptyResults: true, testResults: '**/target/failsafe-reports/*.xml'
                }
            }
        }
    }
}
